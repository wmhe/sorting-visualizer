{"version":3,"sources":["algorithms/checkSorted.js","algorithms/selectionsort.js","index.js","algorithms/bubblesort.js"],"names":["checkSorted","array","i","length","selectionSort","prevMin","newArray","animations","smallest","startIndex","minIndex","push","temp","Display","props","state","this","createArray","min","max","Math","floor","random","intFromInterval","setState","dotSort","sort","a","b","customSort","console","log","arrayEquals","bars","document","getElementsByClassName","style","backgroundColor","animation","setTimeout","height1","height","height2","bubbleSort","color","className","map","number","ind","key","onClick","React","Component","ReactDOM","render","getElementById"],"mappings":"wOAAe,SAASA,EAAYC,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAS,IAAKD,EAEpC,GAAID,EAAMC,GAAKD,EAAMC,EAAI,GACrB,OAAO,EAGf,OAAO,ECLI,SAASE,EAAcH,GAKlC,IAJA,IAGmEI,EAH/DC,EAAQ,YAAOL,GACfM,EAAa,GACXJ,EAASG,EAASH,OACpBK,EAAWF,EAAS,GAAIG,EAAa,EAAGC,EAAWD,EAC9CP,EAAIO,EAAYP,EAAIC,IAAUD,EAUnC,GAPII,EAASJ,IAAMM,IACfA,EAAWF,EAASJ,GACpBG,EAAUK,EACVA,EAAWR,EACXK,EAAWI,KAAK,CAACF,EAAYC,EAAUL,KAGvCH,IAAMC,EAAS,EAAG,CAClB,IAAIS,EAAON,EAASI,GACpBJ,EAASI,GAAYJ,EAASG,GAC9BH,EAASG,GAAcG,EACvBL,EAAWI,KAAK,CAACF,EAAYC,EAAU,MAAOR,IAE9CA,IADEO,IAGAP,EACFM,EAAWF,EAASG,GACpBC,EAAWD,EACXJ,EAAUI,EAGlB,MAAO,CAACF,EAAYD,GCzBxB,IAGQO,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXd,MAAO,IAHQ,E,gEAQjBe,KAAKC,gB,sCAGSC,EAAKC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,K,oCAKhD,IADA,IAAMjB,EAAQ,GACLC,EAAI,EAAGA,EAAI,KAAMA,EACxBD,EAAMU,KAAKK,KAAKO,gBAAgB,EAAG,MAErCP,KAAKQ,SAAS,CAACvB,Y,0CAIf,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAQA,EAC5B,CAEE,IADA,IAAMD,EAAQ,GACLC,EAAI,EAAGA,EAAIc,KAAKO,gBAAgB,EAAG,OAASrB,EACnDD,EAAMU,KAAKK,KAAKO,gBAAgB,EAAG,MAErC,IAAME,EAAUxB,EAAMyB,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAIC,KAClCC,EAAazB,EAAcH,GAAO,GACxC6B,QAAQC,IAAIf,KAAKgB,YAAYP,EAASI,O,kCAI9BJ,EAASI,GACnB,GAAIJ,EAAQtB,SAAW0B,EAAW1B,OAChC,OAAO,EAGT,IAAK,IAAID,EAAI,EAAGA,EAAIuB,EAAQtB,SAAUD,EACpC,GAAIuB,EAAQvB,KAAO2B,EAAW3B,GAC5B,OAAO,EAGX,OAAO,I,sCAIP,IACMK,EAAaH,EADL,YAAOY,KAAKD,MAAMd,QACW,GACrCgC,EAAOC,SAASC,uBAAuB,OAC7CF,EAAK,GAAGG,MAAMC,gBAxDI,MAyDlB,IALc,eAKLnC,GAEP,IAAMoC,EAAY/B,EAAWL,GACC,QAAjBoC,EAAU,GAErBC,YAAW,WACT,IAAMC,EAAUP,EAAKK,EAAU,IAAIF,MAAMK,OACnCC,EAAUT,EAAKK,EAAU,IAAIF,MAAMK,OACzCR,EAAKK,EAAU,IAAIF,MAAMK,OAASC,EAClCT,EAAKK,EAAU,IAAIF,MAAMK,OAASD,EAClCP,EAAKK,EAAU,IAAIF,MAAMC,gBApEf,SAqEVJ,EAAKK,EAAU,IAAIF,MAAMC,gBArEf,WAsEL,IAAJnC,GAEIoC,EAAUnC,OAAS,GAC1BoC,YAAW,WACLD,EAAU,KAAOA,EAAU,KAC7BL,EAAKK,EAAU,IAAIF,MAAMC,gBA1Ef,MA2EVJ,EAAKK,EAAU,IAAIF,MAAMC,gBA5EjB,YA8EL,IAAJnC,IApBEA,EAAI,EAAGA,EAAIK,EAAWJ,SAAUD,EACxC,EADQA,K,mCA6BT,IAHA,IACMK,ECzFG,SAAoBN,GAG/B,IAFA,IAAqBW,EAAjBL,EAAa,GACbD,EAAQ,YAAOL,IACXD,EAAYM,IAEhB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAASH,OAAS,IAAKD,EAEnCI,EAASJ,GAAKI,EAASJ,EAAI,IAC3BU,EAAON,EAASJ,GAChBI,EAASJ,GAAKI,EAASJ,EAAI,GAC3BI,EAASJ,EAAI,GAAKU,EAElBL,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,IAE3BK,EAAWI,KAAK,CAACT,EAAGA,EAAI,IAExBK,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,KAI3BK,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,IAIvC,MAAO,CAACK,EAAYD,GDiECqC,CADL,YAAO3B,KAAKD,MAAMd,QACQ,GAClCgC,EAAOC,SAASC,uBAAuB,OAHlC,WAIFjC,GAEP,IAAMoC,EAAY/B,EAAWL,GACY,IAArBoC,EAAUnC,OAE5BoC,YAAW,WACT,IAAMK,EAAQN,EAAU,GA7Fd,SACE,MA6FZL,EAAKK,EAAU,IAAIF,MAAMC,gBAAkBO,EAC3CX,EAAKK,EAAU,IAAIF,MAAMC,gBAAkBO,IAClC,IAAP1C,EAAE,IAGNqC,YAAW,WACT,IAAMC,EAAUP,EAAKK,EAAU,IAAIF,MAAMK,OACnCC,EAAUT,EAAKK,EAAU,IAAIF,MAAMK,OACzCR,EAAKK,EAAU,IAAIF,MAAMK,OAASC,EAClCT,EAAKK,EAAU,IAAIF,MAAMK,OAASD,IACzB,IAAPtC,EAAE,KAjBDA,EAAI,EAAGA,EAAIK,EAAWJ,SAAUD,EACxC,EADQA,K,+BAsBD,IAAD,OACDD,EAAQe,KAAKD,MAAMd,MAEzB,OACE,oCACE,yBAAK4C,UAAU,kBACX5C,EAAM6C,KAAI,SAACC,EAAQC,GAAT,OACR,yBACAH,UAAU,MAAMI,IAAKD,EACrBZ,MAAO,CAACK,OAAO,GAAD,OAAKM,EAAL,aAIpB,yBAAKF,UAAU,OACb,yBAAKA,UAAU,mBACf,4BAAQA,UAAU,kBAClBK,QAAS,kBAAM,EAAKP,eADpB,eAIA,4BAAQE,UAAU,kBAClBK,QAAS,kBAAM,EAAK9C,kBADpB,kBAIA,4BAAQyC,UAAU,kBAClBK,QAAS,kBAAM,EAAKjC,gBADpB,gB,GAjIYkC,IAAMC,WA8I5BC,IAASC,OACP,kBAAC,EAAD,MACApB,SAASqB,eAAe,U","file":"static/js/main.fd194831.chunk.js","sourcesContent":["export default function checkSorted(array) {\r\n    for (let i = 0; i < array.length - 1; ++i)\r\n    {\r\n        if (array[i] > array[i + 1]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","// import checkSorted from './checkSorted';\r\n\r\nexport default function selectionSort(array) {\r\n    var newArray = [...array];\r\n    var animations = [];\r\n    const length = newArray.length;\r\n    var smallest = newArray[0], startIndex = 0, minIndex = startIndex, prevMin;\r\n    for (let i = startIndex; i < length; ++i)\r\n    {\r\n        // found smallest or new smallest\r\n        if (newArray[i] <= smallest) {\r\n            smallest = newArray[i];\r\n            prevMin = minIndex;\r\n            minIndex = i;\r\n            animations.push([startIndex, minIndex, prevMin]);\r\n        }\r\n        // reached end of array\r\n        if (i === length - 1) {\r\n            var temp = newArray[minIndex];\r\n            newArray[minIndex] = newArray[startIndex];\r\n            newArray[startIndex] = temp;\r\n            animations.push([startIndex, minIndex, \"end\", i]);\r\n            ++startIndex;\r\n            i = startIndex;\r\n            // counter loop increment\r\n            --i;\r\n            smallest = newArray[startIndex];\r\n            minIndex = startIndex;\r\n            prevMin = startIndex;\r\n        }\r\n    }\r\n    return [animations, newArray];\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport bubbleSort from './algorithms/bubblesort';\r\nimport selectionSort from './algorithms/selectionsort';\r\n\r\nconst PRIMARY_COLOR = \"indigo\"; //starting color\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\n  class Display extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        array: [],\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.createArray();\r\n    }\r\n\r\n    intFromInterval(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    createArray() {\r\n      const array = [];\r\n      for (let i = 0; i < 70; ++i) {\r\n        array.push(this.intFromInterval(5, 500));\r\n      }\r\n      this.setState({array});\r\n    }\r\n\r\n    testSelectionSort() {\r\n      for (let i = 0; i < 1000; ++i)\r\n      {\r\n        const array = [];\r\n        for (let i = 0; i < this.intFromInterval(1, 1000); ++i) {\r\n          array.push(this.intFromInterval(1, 1000));  \r\n        }\r\n        const dotSort = array.sort((a,b) => a - b);\r\n        const customSort = selectionSort(array)[1];\r\n        console.log(this.arrayEquals(dotSort, customSort));\r\n      }\r\n    }\r\n\r\n    arrayEquals(dotSort, customSort) {\r\n      if (dotSort.length !== customSort.length) {\r\n        return false;\r\n      }\r\n      \r\n      for (let i = 0; i < dotSort.length; ++i) {\r\n        if (dotSort[i] !== customSort[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    selectionSort() {\r\n      const newArray = [...this.state.array];\r\n      const animations = selectionSort(newArray)[0];\r\n      const bars = document.getElementsByClassName(\"num\");\r\n      bars[0].style.backgroundColor = SECONDARY_COLOR;\r\n      for (let i = 0; i < animations.length; ++i)\r\n      {\r\n        const animation = animations[i];\r\n        const swap = animation[2] === \"end\";\r\n        if (swap) {\r\n          setTimeout(() => {\r\n            const height1 = bars[animation[1]].style.height;\r\n            const height2 = bars[animation[0]].style.height;\r\n            bars[animation[1]].style.height = height2;\r\n            bars[animation[0]].style.height = height1;\r\n            bars[animation[1]].style.backgroundColor = PRIMARY_COLOR;\r\n            bars[animation[0]].style.backgroundColor = PRIMARY_COLOR;\r\n          }, i * 100);\r\n        }\r\n        else if (animation.length > 1) {\r\n          setTimeout(() => {\r\n            if (animation[1] !== animation[2]) {\r\n              bars[animation[1]].style.backgroundColor = SECONDARY_COLOR;\r\n              bars[animation[2]].style.backgroundColor = PRIMARY_COLOR;\r\n            }\r\n          }, i * 100);\r\n        }\r\n      }\r\n    }\r\n\r\n    bubbleSort() {\r\n      const newArray = [...this.state.array];\r\n      const animations = bubbleSort(newArray)[0];\r\n      const bars = document.getElementsByClassName(\"num\");\r\n      for (let i = 0; i < animations.length; ++i)\r\n      {\r\n        const animation = animations[i];\r\n        const colorChange = animation.length === 3;\r\n        if (colorChange) {\r\n          setTimeout(() => {\r\n            const color = animation[2] ? PRIMARY_COLOR : SECONDARY_COLOR;\r\n            bars[animation[0]].style.backgroundColor = color;\r\n            bars[animation[1]].style.backgroundColor = color;\r\n          }, (i+1) * 10);\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            const height1 = bars[animation[0]].style.height;\r\n            const height2 = bars[animation[1]].style.height;\r\n            bars[animation[0]].style.height = height2;\r\n            bars[animation[1]].style.height = height1;\r\n          }, (i+1) * 10);\r\n        }\r\n      }\r\n    }\r\n    \r\n    render() {\r\n      const array = this.state.array;\r\n\r\n      return (\r\n        <>\r\n          <div className=\"arrayContainer\">\r\n            { array.map((number, ind) => \r\n                <div\r\n                className=\"num\" key={ind}\r\n                style={{height: `${number}px`}}\r\n                ></div>\r\n              ) }\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col text-center\">\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.bubbleSort()}\r\n            >Bubble Sort\r\n            </button>\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.selectionSort()}\r\n            >Selection Sort\r\n            </button>\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.createArray()}\r\n            >Reset\r\n            </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Display />,\r\n    document.getElementById('root')\r\n  );\r\n  ","import checkSorted from './checkSorted';\r\n\r\nexport default function bubbleSort(array) {\r\n    var animations = [], temp;\r\n    var newArray = [...array];\r\n    while (!checkSorted(newArray))\r\n    {\r\n        for (let i = 0; i < newArray.length - 1; ++i)\r\n        {\r\n            if (newArray[i] > newArray[i + 1]) {\r\n                temp = newArray[i];\r\n                newArray[i] = newArray[i + 1];\r\n                newArray[i + 1] = temp;\r\n                // compare\r\n                animations.push([i, i + 1, false]);\r\n                // swap\r\n                animations.push([i, i + 1]);\r\n                // revert color\r\n                animations.push([i, i + 1, true]);\r\n            }\r\n            else {\r\n                // compare without swap/revert\r\n                animations.push([i, i + 1, true]);\r\n            }\r\n        }\r\n    }\r\n    return [animations, newArray];\r\n}"],"sourceRoot":""}