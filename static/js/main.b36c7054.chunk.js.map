{"version":3,"sources":["algorithms/checkSorted.js","algorithms/selectionsort.js","index.js","algorithms/bubblesort.js"],"names":["checkSorted","array","i","length","selectionSort","minIndex","newArray","animations","smallest","startIndex","temp","push","Display","props","state","this","createArray","min","max","Math","floor","random","intFromInterval","setState","dotSort","sort","a","b","customSort","console","log","arrayEquals","bars","document","getElementsByClassName","style","backgroundColor","animation","endInd","startIndChange","startInd","currInd","setTimeout","bubbleSort","color","height1","height","height2","className","map","number","ind","key","onClick","React","Component","ReactDOM","render","getElementById"],"mappings":"wOAAe,SAASA,EAAYC,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAS,IAAKD,EAEpC,GAAID,EAAMC,GAAKD,EAAMC,EAAI,GACrB,OAAO,EAGf,OAAO,ECLI,SAASE,EAAcH,GAKlC,IAJA,IAGqCI,EAHjCC,EAAQ,YAAOL,GACfM,EAAa,GACXJ,EAASG,EAASH,OACpBK,EAAW,IAAMC,EAAa,EACzBP,EAAIO,EAAYP,EAAIC,IAAUD,EAQnC,GALII,EAASJ,IAAMM,IACfA,EAAWF,EAASJ,GACpBG,EAAWH,GAGXA,IAAMC,EAAS,EAAG,CAClB,IAAIO,EAAOJ,EAASG,GACpBH,EAASD,GAAYC,EAASG,GAC9BH,EAASG,GAAcC,EAGvBF,EAAWF,EADXJ,IADEO,GAGFF,EAAWI,KAAK,CAACF,GAAY,EAAMP,QAElC,IAAIF,EAAYM,GACjB,MAIAC,EAAWI,KAAK,CAACF,GAAY,EAAOP,IAG5C,MAAO,CAACK,EAAYD,GC1BxB,IAGQM,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXb,MAAO,IAHQ,E,gEAQjBc,KAAKC,gB,sCAGSC,EAAKC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,K,oCAKhD,IADA,IAAMhB,EAAQ,GACLC,EAAI,EAAGA,EAAI,KAAMA,EACxBD,EAAMU,KAAKI,KAAKO,gBAAgB,EAAG,MAErCP,KAAKQ,SAAS,CAACtB,Y,0CAIf,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAQA,EAC5B,CAEE,IADA,IAAMD,EAAQ,GACLC,EAAI,EAAGA,EAAIa,KAAKO,gBAAgB,EAAG,OAASpB,EACnDD,EAAMU,KAAKI,KAAKO,gBAAgB,EAAG,MAErC,IAAME,EAAUvB,EAAMwB,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAIC,KAClCC,EAAaxB,EAAcH,GAAO,GACxC4B,QAAQC,IAAIf,KAAKgB,YAAYP,EAASI,O,kCAI9BJ,EAASI,GACnB,GAAIJ,EAAQrB,SAAWyB,EAAWzB,OAChC,OAAO,EAGT,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAQrB,SAAUD,EACpC,GAAIsB,EAAQtB,KAAO0B,EAAW1B,GAC5B,OAAO,EAGX,OAAO,I,sCAIP,IAAMI,EAAQ,YAAOS,KAAKD,MAAMb,OAC1BM,EAAaH,EAAcE,GAAU,GACrC0B,EAAOC,SAASC,uBAAuB,OAC7CF,EAAK,GAAGG,MAAMC,gBAAkB,SAChC,IALc,eAKLlC,GAEP,IAAMmC,EAAY9B,EAAWL,GACvBoC,EAAShC,EAASH,OAAS,EACjC6B,EAAKM,GAAQH,MAAMC,gBAAkB,SACrC,IAAMG,EAAiBF,EAAU,GAC3BG,EAAWH,EAAU,GACrBI,EAAUJ,EAAU,GACtBE,EACFG,YAAW,WACTV,EAAKQ,EAAW,GAAGL,MAAMC,gBAAkB,SAC3CJ,EAAKQ,GAAUL,MAAMC,gBAAkB,WAClC,IAAJlC,GAGHwC,YAAW,WACO,IAAZD,GACFT,EAAKS,EAAU,GAAGN,MAAMC,gBAAkB,SAC1CJ,EAAKS,GAASN,MAAMC,gBAAkB,OAGtCJ,EAAKS,GAASN,MAAMC,gBAAkB,QAEnC,IAAJlC,IAvBEA,EAAI,EAAGA,EAAIK,EAAWJ,SAAUD,EACxC,EADQA,K,mCAgCT,IAHA,IACMK,EC5FG,SAAoBN,GAG/B,IAFA,IAAqBS,EAAjBH,EAAa,GACbD,EAAQ,YAAOL,IACXD,EAAYM,IAEhB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAASH,OAAS,IAAKD,EAEnCI,EAASJ,GAAKI,EAASJ,EAAI,IAC3BQ,EAAOJ,EAASJ,GAChBI,EAASJ,GAAKI,EAASJ,EAAI,GAC3BI,EAASJ,EAAI,GAAKQ,EAElBH,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,IAE3BK,EAAWI,KAAK,CAACT,EAAGA,EAAI,IAExBK,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,KAI3BK,EAAWI,KAAK,CAACT,EAAGA,EAAI,GAAG,IAIvC,MAAO,CAACK,EAAYD,GDoECqC,CADL,YAAO5B,KAAKD,MAAMb,QACQ,GAClC+B,EAAOC,SAASC,uBAAuB,OAHlC,WAIFhC,GAEP,IAAMmC,EAAY9B,EAAWL,GACY,IAArBmC,EAAUlC,OAE5BuC,YAAW,WACT,IAAME,EAAQP,EAAU,GAhGd,SACE,MAgGZL,EAAKK,EAAU,IAAIF,MAAMC,gBAAkBQ,EAC3CZ,EAAKK,EAAU,IAAIF,MAAMC,gBAAkBQ,IAClC,IAAP1C,EAAE,IAGNwC,YAAW,WACT,IAAMG,EAAUb,EAAKK,EAAU,IAAIF,MAAMW,OACnCC,EAAUf,EAAKK,EAAU,IAAIF,MAAMW,OACzCd,EAAKK,EAAU,IAAIF,MAAMW,OAASC,EAClCf,EAAKK,EAAU,IAAIF,MAAMW,OAASD,IACzB,IAAP3C,EAAE,KAjBDA,EAAI,EAAGA,EAAIK,EAAWJ,SAAUD,EACxC,EADQA,K,+BAsBD,IAAD,OACDD,EAAQc,KAAKD,MAAMb,MAEzB,OACE,oCACE,yBAAK+C,UAAU,kBACX/C,EAAMgD,KAAI,SAACC,EAAQC,GAAT,OACR,yBACAH,UAAU,MAAMI,IAAKD,EACrBhB,MAAO,CAACW,OAAO,GAAD,OAAKI,EAAL,aAIpB,yBAAKF,UAAU,OACb,4BAAQA,UAAU,kBAClBK,QAAS,kBAAM,EAAKV,eADpB,eAIA,4BAAQK,UAAU,kBAClBK,QAAS,kBAAM,EAAKjD,kBADpB,kBAIA,4BAAQ4C,UAAU,kBAClBK,QAAS,kBAAM,EAAKrC,gBADpB,e,GAnIYsC,IAAMC,WA+I5BC,IAASC,OACP,kBAAC,EAAD,MACAxB,SAASyB,eAAe,U","file":"static/js/main.b36c7054.chunk.js","sourcesContent":["export default function checkSorted(array) {\r\n    for (let i = 0; i < array.length - 1; ++i)\r\n    {\r\n        if (array[i] > array[i + 1]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import checkSorted from './checkSorted';\r\n\r\nexport default function selectionSort(array) {\r\n    var newArray = [...array];\r\n    var animations = [];\r\n    const length = newArray.length;\r\n    var smallest = 1000, startIndex = 0, minIndex;\r\n    for (let i = startIndex; i < length; ++i)\r\n    {\r\n        // found smallest or new smallest\r\n        if (newArray[i] <= smallest) {\r\n            smallest = newArray[i];\r\n            minIndex = i;\r\n        }\r\n        // reached end of array\r\n        if (i === length - 1) {\r\n            var temp = newArray[startIndex];\r\n            newArray[minIndex] = newArray[startIndex];\r\n            newArray[startIndex] = temp;\r\n            ++startIndex;\r\n            i = startIndex;\r\n            smallest = newArray[i];\r\n            animations.push([startIndex, true, i]);\r\n        }\r\n        else if (checkSorted(newArray)) {\r\n            break;\r\n        }\r\n        // one comparison complete\r\n        else {\r\n            animations.push([startIndex, false, i]);\r\n        }\r\n    }\r\n    return [animations, newArray];\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport bubbleSort from './algorithms/bubblesort';\r\nimport selectionSort from './algorithms/selectionsort';\r\n\r\nconst PRIMARY_COLOR = \"indigo\"; //starting color\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\n  class Display extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        array: [],\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.createArray();\r\n    }\r\n\r\n    intFromInterval(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    createArray() {\r\n      const array = [];\r\n      for (let i = 0; i < 50; ++i) {\r\n        array.push(this.intFromInterval(5, 500));\r\n      }\r\n      this.setState({array});\r\n    }\r\n\r\n    testSelectionSort() {\r\n      for (let i = 0; i < 1000; ++i)\r\n      {\r\n        const array = [];\r\n        for (let i = 0; i < this.intFromInterval(1, 1000); ++i) {\r\n          array.push(this.intFromInterval(1, 1000));  \r\n        }\r\n        const dotSort = array.sort((a,b) => a - b);\r\n        const customSort = selectionSort(array)[1];\r\n        console.log(this.arrayEquals(dotSort, customSort));\r\n      }\r\n    }\r\n\r\n    arrayEquals(dotSort, customSort) {\r\n      if (dotSort.length !== customSort.length) {\r\n        return false;\r\n      }\r\n      \r\n      for (let i = 0; i < dotSort.length; ++i) {\r\n        if (dotSort[i] !== customSort[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    selectionSort() {\r\n      const newArray = [...this.state.array];\r\n      const animations = selectionSort(newArray)[0];\r\n      const bars = document.getElementsByClassName(\"num\");\r\n      bars[0].style.backgroundColor = \"violet\";\r\n      for (let i = 0; i < animations.length; ++i)\r\n      {\r\n        const animation = animations[i];\r\n        const endInd = newArray.length - 1;\r\n        bars[endInd].style.backgroundColor = \"violet\";\r\n        const startIndChange = animation[1];\r\n        const startInd = animation[0];\r\n        const currInd = animation[2];\r\n        if (startIndChange) {\r\n          setTimeout(() => {\r\n            bars[startInd - 1].style.backgroundColor = \"indigo\";\r\n            bars[startInd].style.backgroundColor = \"violet\";\r\n          }, i * 100);\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            if (currInd !== 0) {\r\n              bars[currInd - 1].style.backgroundColor = \"indigo\";\r\n              bars[currInd].style.backgroundColor = \"red\";\r\n            }\r\n            else {\r\n              bars[currInd].style.backgroundColor = \"red\";\r\n            }\r\n          }, i * 100);\r\n        }\r\n      }\r\n    }\r\n\r\n    bubbleSort() {\r\n      const newArray = [...this.state.array];\r\n      const animations = bubbleSort(newArray)[0];\r\n      const bars = document.getElementsByClassName(\"num\");\r\n      for (let i = 0; i < animations.length; ++i)\r\n      {\r\n        const animation = animations[i];\r\n        const colorChange = animation.length === 3;\r\n        if (colorChange) {\r\n          setTimeout(() => {\r\n            const color = animation[2] ? PRIMARY_COLOR : SECONDARY_COLOR;\r\n            bars[animation[0]].style.backgroundColor = color;\r\n            bars[animation[1]].style.backgroundColor = color;\r\n          }, (i+1) * 10);\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            const height1 = bars[animation[0]].style.height;\r\n            const height2 = bars[animation[1]].style.height;\r\n            bars[animation[0]].style.height = height2;\r\n            bars[animation[1]].style.height = height1;\r\n          }, (i+1) * 10);\r\n        }\r\n      }\r\n    }\r\n    \r\n    render() {\r\n      const array = this.state.array;\r\n\r\n      return (\r\n        <>\r\n          <div className=\"arrayContainer\">\r\n            { array.map((number, ind) => \r\n                <div\r\n                className=\"num\" key={ind}\r\n                style={{height: `${number}px`}}\r\n                ></div>\r\n              ) }\r\n          </div>\r\n          <div className=\"row\">\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.bubbleSort()}\r\n            >Bubble Sort\r\n            </button>\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.selectionSort()}\r\n            >Selection Sort\r\n            </button>\r\n            <button className=\"btn btn-primary\"\r\n            onClick={() => this.createArray()}\r\n            >Reset\r\n            </button>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Display />,\r\n    document.getElementById('root')\r\n  );\r\n  ","import checkSorted from './checkSorted';\r\n\r\nexport default function bubbleSort(array) {\r\n    var animations = [], temp;\r\n    var newArray = [...array];\r\n    while (!checkSorted(newArray))\r\n    {\r\n        for (let i = 0; i < newArray.length - 1; ++i)\r\n        {\r\n            if (newArray[i] > newArray[i + 1]) {\r\n                temp = newArray[i];\r\n                newArray[i] = newArray[i + 1];\r\n                newArray[i + 1] = temp;\r\n                // compare\r\n                animations.push([i, i + 1, false]);\r\n                // swap\r\n                animations.push([i, i + 1]);\r\n                // revert color\r\n                animations.push([i, i + 1, true]);\r\n            }\r\n            else {\r\n                // compare without swap/revert\r\n                animations.push([i, i + 1, true]);\r\n            }\r\n        }\r\n    }\r\n    return [animations, newArray];\r\n}"],"sourceRoot":""}